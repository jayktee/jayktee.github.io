---
title: "Oxford + Google Mobility"
author: "Joyce Tagal"
date: "`r Sys.Date()`"
output: 
  github_document:
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r message=FALSE, warning=FALSE}
# Libraries
library(tidyverse)
library(lubridate)
library(RcppRoll)

# Parameters

oxfordlink <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
gmobility <- "/Users/joycetagal/GitHub/snap-stanford/epidemic-policies/joyce/data/Global_Mobility_Report.csv"
stageslink <- "/Users/joycetagal/GitHub/snap-stanford/epidemic-policies/joyce/data/world-stages-infected-20200606.csv"
pops <- "/Users/joycetagal/GitHub/snap-stanford/epidemic-policies/alex/world_pop_2020.csv"
gmobilitydate <- "2020-05-21"

#===============================================================================

```

## Download data

```{r}

oxford <- 
  read_csv(oxfordlink) %>% 
  rename_all(~str_to_lower(.)) %>% 
  mutate(date = as_date(as.character(date))) 

oxford 

```

### Create time periods for each country

```{r}

oxforddates <- 
  oxford %>% 
  left_join(
    oxford %>% 
      group_by(countryname) %>% 
      filter(confirmedcases >= 100) %>% 
      mutate(
        firstdate = min(date), 
        mindate = firstdate - 50, 
        maxdate = firstdate + 150
      ) %>% 
      select(countryname, firstdate, mindate, maxdate) %>% 
      group_by(countryname) %>% 
      slice_head(n = 1),
    by = c("countryname" = "countryname")
  ) %>% 
  group_by(countryname) %>% 
  mutate(
    days = date - firstdate,
    reportedcases = confirmedcases - lag(confirmedcases),
    meanreportedcases = roll_mean(reportedcases, n = 10, fill = NA, align = "right", na.rm = TRUE)
  )
  

oxforddates %>% 
  filter(countryname == "China")
```

```{r, fig.width='100%'}

selected_countries <- c(
  "China",
  "United States",
  "United Kingdom",
  "South Korea",
  "France",
  "Italy"
)


oxforddates %>% 
  filter(countryname %in% selected_countries) %>% 
  ggplot(aes(x = days, y = stringencyindexfordisplay, group = countryname)) + 
  geom_line(aes(color = countryname)) +
  scale_x_continuous() +
  labs(
    y = "Stringency Index (0-100)",
    x = "Days from 100th confirmed case",
    caption = str_glue("Source: Oxford COVID-19 Government Response Tracker. 
                       Data from {format(Sys.Date(), '%d %b, %Y')}. Individual countries may be several days older"
    ),
    title = "Selected countries and their response to Covid-19",
    color = "Countries"
  ) +
  theme(
    plot.caption = element_text(hjust = 0)
  )

ggsave(filename = 'images/selectedcountries_reported_stringency.png')

```


```{r}

selected_countries <- c(
  "China",
  "United States",
  "United Kingdom",
  "South Korea",
  "France",
  "Italy"
)

f <- Vectorize(function(x) {
  log10(x) * (100/6)
})

oxforddates %>% 
  filter(countryname %in% selected_countries, date >= mindate, date <= maxdate) %>% 
  group_by(countryname) %>% 
  ggplot(aes(x = days)) +
  geom_line(aes(y = confirmedcases, group = countryname)) +
  geom_line(aes(y = 10 ^ (stringencyindexfordisplay / (100/6)), group = countryname), color = "red") +
  scale_x_continuous(
    limits = c(-50, 150)
  ) +
  scale_y_log10(
    breaks = scales::breaks_log(n = 6),
    labels = scales::label_number(accuracy = 1, big.mark = ","),
    sec.axis = sec_axis(~f(.), breaks = scales::breaks_pretty(n = 5))
  ) +
  facet_wrap(vars(countryname)) +
  labs(
    caption = str_glue(
      "Source: Oxford COVID-19 Government Response Tracker. Data from {format(Sys.Date(), '%d %b, %Y')}. Individual countries may be several days older"),
    title = str_glue("Comparison of {length(selected_countries)} country responses to COVID-19 as cases rise"),
    x = "Days after 100th recorded case",
    y = "Reported number of cases"
  ) +
  theme_bw() +
  theme(
    axis.text.y.right = element_text(color = "red"),
    plot.caption = element_text(hjust = 0)
  )


```

```{r}

selected_countries <- c(
  "China",
  "United States",
  "United Kingdom",
  "South Korea",
  "France",
  "Italy"
)


oxforddates %>% 
  filter(countryname %in% selected_countries, date >= mindate, date <= maxdate) %>% 
  group_by(countryname) %>% 
  ggplot(aes(x = days)) +
  geom_line(aes(y = meanreportedcases, group = countryname)) +
  scale_x_continuous(
    limits = c(-50, 150)
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty(n = 6),
    labels = scales::label_number(accuracy = 1, big.mark = ",")
  ) +
  facet_wrap(vars(countryname), scales = "free_y") +
  labs(
    caption = str_glue(
      "Source: Oxford COVID-19 Government Response Tracker. Data from {format(Sys.Date(), '%d %b, %Y')}. Individual countries may be several days older"),
    title = str_glue("Comparison of {length(selected_countries)} country responses to COVID-19 as cases rise"),
    x = "Days after 100th recorded case",
    y = "Reported number of cases"
  ) +
  theme_bw() +
  theme(
    axis.text.y.right = element_text(color = "red"),
    plot.caption = element_text(hjust = 0)
  )


```

```{r}

plotreportedstringency <- function(country) {
  countrypeak <- 
  oxforddates %>% 
  filter(countryname == country, date >= mindate, date <= maxdate) %>% 
  group_by(countryname) %>% 
  filter(meanreportedcases == max(meanreportedcases, na.rm = TRUE)) %>% 
  pull(meanreportedcases)
  
oxforddates %>% 
  filter(countryname == country, date >= mindate, date <= maxdate) %>% 
  ggplot(aes(x = days)) +
  geom_line(aes(y = meanreportedcases, group = countryname)) +
  geom_line(aes(y = (stringencyindexfordisplay * (countrypeak / 100)), group = countryname), color = "red") +
  scale_x_continuous(
    limits = c(-50, 150)
  ) +
  scale_y_continuous(
    breaks = scales::breaks_pretty(n = 6),
    labels = scales::label_number(accuracy = 1, big.mark = ","),
    sec.axis = sec_axis(~. / (countrypeak / 100), breaks = scales::breaks_pretty(n = 5), name = "Stringency Index (0-100)")
  ) +
  labs(
    caption = str_glue(
      "Source: Oxford COVID-19 Government Response Tracker. Data from {format(Sys.Date(), '%d %b, %Y')}."),
    title = str_glue("{country}'s government response to COVID-19 as cases rise"),
    x = "Days after 100th recorded case",
    y = "Reported number of cases / day"
  ) +
  theme_light() +
  theme(
    axis.text.y.right = element_text(color = "red"),
    axis.line.y.right = element_line(color = "red"),
    axis.ticks.y.right = element_line(color = "red"),
    axis.title.y.right = element_text(color = "red"),
    plot.caption = element_text(hjust = 0)
  )
  
# ggsave(str_glue('images/{country}_reported_stringency.png'))
}


plotreportedstringency("China")
plotreportedstringency("Mexico")
plotreportedstringency("United States")
plotreportedstringency("Norway")
plotreportedstringency("Singapore")
plotreportedstringency("Iceland")
plotreportedstringency("South Korea")
plotreportedstringency("Saudi Arabia")
plotreportedstringency("Italy")
plotreportedstringency("Sweden")

```

## Mobility data

```{r}

selected_countries <- c(
  "United States",
  "South Korea",
  "Singapore",
  "Italy",
  "Norway",
  "Saudi Arabia",
  "Sweden",
  "New Zealand",
  "Malaysia",
  "India",
  "Argentina",
  "United Arab Emirates",
  "Spain",
  "Taiwan"
)
  

mobility <- 
  read_csv(gmobility, col_types = "ccccDiiiiii") 

mobility 

```


```{r}

stringencymobility <- 
  mobility %>% 
  filter(country_region %in% selected_countries) %>% 
  left_join(
    oxforddates,
    by = c("country_region" = "countryname", "date" = "date")
  ) 

stringencymobility %>% 
  filter(country_region == "New Zealand")
  

```

```{r, warning=FALSE}

plotreportedmobility <- function(country) {
  countrypeak <- 
  stringencymobility %>% 
  filter(
    country_region == country, 
    is.na(sub_region_1), 
    is.na(sub_region_2), 
    date >= mindate, 
    date <= maxdate
  ) %>% 
  group_by(country_region) %>% 
  filter(meanreportedcases == max(meanreportedcases, na.rm = TRUE)) %>% 
  pull(meanreportedcases)

stringencymobility %>% 
  filter(country_region == country, is.na(sub_region_1), is.na(sub_region_2)) %>% 
  ggplot(aes(x = days, group = country_region)) +
  geom_line(aes(y = meanreportedcases), color = "red") +
  geom_line(aes(y = (stringencyindexfordisplay * (countrypeak / 100)), group = country_region), color = "blue") +
  geom_line(aes(y = residential_percent_change_from_baseline * (countrypeak / 100)), color = "blue", linetype = "dashed") +
  # geom_area(aes(y = residential_percent_change_from_baseline * (countrypeak / 50)), fill = "red", alpha = 0.5) +
  scale_x_continuous() +
  scale_y_continuous(
    breaks = scales::breaks_pretty(n = 6),
    labels = scales::label_number(accuracy = 1, big.mark = ","),
    sec.axis = sec_axis(
      ~. / (countrypeak / 100), 
      breaks = scales::breaks_pretty(n = 5), 
      labels = scales::label_percent(scale = 1, suffix = "%"),
      name = "Residential duration / Stringency Index (0-100%)"
    )
  ) +
  labs(
    caption = str_glue(
      "Source: Google LLC 'Google COVID-19 Community Mobility Reports'. \nhttps://www.google.com/covid19/mobility/. Accessed {parse_date(gmobilitydate)}; 
Oxford Covid-19 Government Response Tracker (OxCGRT). 
https://www.bsg.ox.ac.uk/covidtracker. Data from {format(Sys.Date(), '%d %b, %Y')}."),
    title = str_glue("{country}'s residential hours change and policy stringency\ncompared to daily reported cases"),
    x = "Days after 100th recorded case",
    y = "Reported number of cases / day",
    color = "Legend"
  ) +
  theme_light() +
  theme(
    axis.text.y.right = element_text(color = "blue"),
    axis.line.y.right = element_line(color = "blue"),
    axis.ticks.y.right = element_line(color = "blue"),
    axis.text.y.left = element_text(color = "red"),
    axis.line.y.left = element_line(color = "red"),
    axis.ticks.y.left = element_line(color = "red"),
    axis.title.y.right =  element_text(size = 10),
    plot.caption = element_text(hjust = 0),
    legend.position = "bottom"
  )

ggsave(str_glue('images/{country}_all.png'))
}


plotreportedmobility("Italy")
plotreportedmobility("Singapore")
plotreportedmobility("United States")
plotreportedmobility("Norway")
plotreportedmobility("Singapore")
plotreportedmobility("Saudi Arabia")
plotreportedmobility("Sweden")
plotreportedmobility("South Korea")
plotreportedmobility("New Zealand")


```


```{r}

stringencymobility %>% 
  filter(country_region == "Italy", is.na(sub_region_1), is.na(sub_region_2)) %>% 
  ggplot(aes(x = days, group = country_region)) +
  # geom_line(aes(y = stringencyindexfordisplay)) +
  geom_line(aes(y = workplaces_percent_change_from_baseline), color = "red") +
  geom_area(aes(y = workplaces_percent_change_from_baseline), fill = "red", alpha = 0.5)

stringencymobility %>% 
  filter(country_region == "Italy", is.na(sub_region_1), is.na(sub_region_2)) %>% 
  ggplot(aes(x = days, group = country_region)) +
  # geom_line(aes(y = stringencyindexfordisplay)) +
  geom_line(aes(y = residential_percent_change_from_baseline), color = "red") +
  geom_area(aes(y = residential_percent_change_from_baseline), fill = "red", alpha = 0.5)

```

Show the country colors based on the latest stage
Show the stages for each country on the same dateline 
Other relationship - 
average stringency over time compared to reported cases, 
timeline of action from entering stage 2 - quickness of response
Rok: use benchmark for timeline of action from 3 cases
- change the "mobility index" to "Residential hours"

```{r}
stages <- 
  read_csv(stageslink) %>% 
  select_all() %>% 
  rename_with(~ str_to_lower(.) %>% str_replace(., " ", "_"))

stages
```


```{r}

stringencymobilityall <- 
  mobility %>% 
  left_join(
    oxforddates,
    by = c("country_region" = "countryname", "date" = "date")
  ) 

stringencymobilitystages <- 
  stringencymobilityall %>% 
  filter(is.na(sub_region_1), is.na(sub_region_2)) %>%
  left_join(
    stages %>% 
      # filter(country_name %in% selected_countries) %>% 
      pivot_longer(
        cols = c(-country_code, -country_name, -population),
        names_to = "stagedate",
        values_to = "stages"
      ) %>% 
      mutate(stagedate = mdy(stagedate)),
    by = c("country_region" = "country_name", "date" = "stagedate")
  ) %>%
  mutate(stages = replace_na(stages, 0)) 
  

```


```{r}

meanstringencies <- 
  stringencymobilitystages %>% 
  group_by(stages) %>% 
  summarize(meanstringency = mean(stringencyindexfordisplay, na.rm = TRUE))

meanstringencies

```

```{r}

labels <- 
  stringencymobilitystages %>% 
  filter(country_region %in% selected_countries) %>% 
  group_by(country_region, stages) %>% 
  summarize(meanstringency = mean(stringencyindexfordisplay, na.rm = TRUE)) %>% 
  filter(stages == 3)
  

stringencymobilitystages %>% 
  filter(country_region %in% selected_countries) %>% 
  group_by(country_region, stages) %>% 
  summarize(meanstringency = mean(stringencyindexfordisplay, na.rm = TRUE)) %>% 
  ggplot(aes(y = meanstringency, x = stages, group = country_region, color = country_region)) +
  geom_line() +
  ggrepel::geom_text_repel(
    data = labels, 
    aes(label = country_region),
    show.legend = FALSE,
    size = 3,
    nudge_y = 3,
    nudge_x = 0.1,
    direction = "y",
    segment.colour = "grey70"
    ) +
  coord_cartesian(expand = TRUE) +
  theme(
    legend.position = "none",
    plot.caption = element_text(hjust = 0)
  ) +
  labs(
    caption = str_glue(
      "Source: Google LLC 'Google COVID-19 Community Mobility Reports'. \nhttps://www.google.com/covid19/mobility/. Accessed {parse_date(gmobilitydate)}; 
Oxford Covid-19 Government Response Tracker (OxCGRT). 
https://www.bsg.ox.ac.uk/covidtracker. Data from {format(Sys.Date(), '%d %b, %Y')}."),
    title = str_glue("Selected countries' policy stringency compared to pandemic stages"),
    x = "Stages",
    y = "Mean stringency by stage (0-100%)"
  )


```
```{r}

means <- 
  stringencymobility %>% 
  summarize(
    meaninternalmovement = mean(`c7_restrictions on internal movement`, na.rm = TRUE),
    meanstringency = mean(stringencyindexfordisplay, na.rm = TRUE)
  ) 

means
```

```{r}

stringencymobilitystages %>% 
  filter(
    country_region %in% selected_countries, 
    stringencyindexfordisplay >= means$meanstringency
  ) %>% 
  group_by(country_region) %>% 
  slice_head(n = 1) %>% 
  select(country_region, days, stages) %>% 
  arrange(days)


```

```{r}

quickresponse <- 
  stringencymobilitystages %>% 
  filter(
    country_region %in% selected_countries, 
    stringencyindexfordisplay >= means$meanstringency
  ) %>% 
  group_by(country_region) %>% 
  slice(1) %>% 
  pull(country_region, days)

quickresponse

```


```{r}

meanstringencycountry <- 
  stringencymobilitystages %>% 
  filter(is.na(sub_region_1), is.na(sub_region_2)) %>% 
  group_by(days) %>% 
  summarize(
    meanstringency = mean(stringencyindexfordisplay, na.rm = TRUE)
  )

meanstringencycountry

```

```{r}

meanmobilitycountry <- 
  stringencymobilitystages %>% 
  filter(is.na(sub_region_1), is.na(sub_region_2)) %>% 
  group_by(stages, days) %>% 
  summarize(meanresidential = mean(residential_percent_change_from_baseline, na.rm = TRUE))

meanmobilitycountry

```

```{r}
meancountry <- 
  meanstringencycountry %>% 
  left_join(meanmobilitycountry, by = c("days"))

```


```{r}

stringencymobilitystages %>% 
  filter(country_region %in% selected_countries) %>% 
  group_by(country_region) %>%
  ggplot(aes(x = days)) +
  geom_path(aes(y = stringencyindexfordisplay, group = country_region, color = country_region)) +
  geom_path(data = meancountry, aes(y = meanstringency, group = days))
  

```




```{r}
stringencymobilitystages %>% 
  filter(country_region %in% selected_countries, is.na(sub_region_1), is.na(sub_region_2)) %>% 
  filter(days %in% c('-5', '0', '5', '10', '15', '20', '25', '30', '35')) %>% 
  mutate(
    mean_mobility_pct =
      pmap_dbl(
        select(., 
               retail_and_recreation_percent_change_from_baseline:workplaces_percent_change_from_baseline),
        ~ mean(c(...), na.rm = TRUE)
      )
  ) %>% 
  select(country_region, days, stringencyindexfordisplay, confirmedcases, stages, mean_mobility_pct) %>% 
  write_csv("stringencymobility.csv")

attach(stringencymobilitystages)
table(country_region)

```


